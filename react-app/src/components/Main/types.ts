import { SampleId, EpochTimeMS, Username, Format } from "../../lib/comm/dynamicServices/SampleServiceClient";
import { FieldDefinition, UserMetadata, Metadata } from "../../lib/Model";

// export interface MetadataField {
//     value: string | number | boolean;
//     units?: string;
//     label: string;
//     description?: string;
//     isControlled: boolean;
//     definition: FieldDefinition;
// }

// export interface UserMetadataField {
//     value: string;
// }

// export interface Metadata {
//     [key: string]: MetadataField;
// }

// export interface UserMetadata {
//     [key: string]: UserMetadataField;
// }

export interface User {
    username: Username;
    realname: string;
    gravatarHash: string;
    avatarOption?: string;
    gravatarDefault?: string;
}

export interface ACL {
    admin: Array<User>;
    write: Array<User>;
    read: Array<User>;
}

export interface TemplateFieldBase {
    type: string;
}

export interface TemplateFormatField extends TemplateFieldBase {
    type: 'metadata',
    key: string;
}

export interface TemplateUserField extends TemplateFieldBase {
    type: 'user',
    label: string;
}

export type TemplateField = TemplateFormatField | TemplateUserField;

// For now, a template is simply an ordered set of sample field keys.
export type Template = {
    header?: Array<string>;
    fields: Array<TemplateField>;
};

// export type SampleType = 'BioReplicate' | 'TechReplicate' | 'SubSample';
export type SampleType = string;

export interface Sample {
    // id generated by sample service
    id: SampleId;

    // supplied in the sample as the ____
    name: string;

    // supplied in the sample as some field mapped to the sample id; must be
    // unique 
    sampleId: string,

    // Supplied in the sample as some field mapped to another sample
    parentSampleId: string | null;

    // Chosen in the sample importer; is it used for anything?
    type: string;

    created: {
        at: EpochTimeMS;
        by: User;
    };

    currentVersion: {
        at: EpochTimeMS;
        by: User;
        version: number;
    };
    latestVersion: {
        at: EpochTimeMS;
        by: User;
        version: number;
    };

    metadata: Metadata;
    userMetadata: UserMetadata;
    format: Format;
}